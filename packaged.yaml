AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Project using some AWS serveless services
Parameters:
  ImagesBucket:
    Type: String
    Default: images-bucket-dpp-new-2
Globals:
  Function:
    Timeout: 50
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Cors:
        AllowMethods: '''OPTIONS,GET,POST,PUT,DELETE'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key, Access-Control-Allow-Origin'''
        AllowOrigin: '''*'''
      Auth:
        Authorizers:
          CustomLambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - ValidateTokenFunction
              - Arn
            Identity:
              Header: Authorization
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-demo-bucket-dpp/7d9c1a4b7483fe69b2bcc07f0d45b791
      Handler: authorizer.basiclogin
      Runtime: nodejs8.10
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /login
            Method: post
  ValidateTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-demo-bucket-dpp/7d9c1a4b7483fe69b2bcc07f0d45b791
      Handler: authorizer.validateToken
      Runtime: nodejs8.10
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-demo-bucket-dpp/7d9c1a4b7483fe69b2bcc07f0d45b791
      Handler: usersCRUD.get
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UsersTable
      Events:
        GetUserPath:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /users/{resourceId}
            Method: get
            Auth:
              Authorizer: CustomLambdaTokenAuthorizer
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-demo-bucket-dpp/7d9c1a4b7483fe69b2bcc07f0d45b791
      Handler: usersCRUD.create
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UsersTable
          ENTITY_ID_FIELD: document.value
      Events:
        PostRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /users
            Method: post
  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-demo-bucket-dpp/7d9c1a4b7483fe69b2bcc07f0d45b791
      Handler: usersCRUD.update
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UsersTable
      Events:
        PutRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /users/{resourceId}
            Method: put
            Auth:
              Authorizer: CustomLambdaTokenAuthorizer
  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-demo-bucket-dpp/7d9c1a4b7483fe69b2bcc07f0d45b791
      Handler: usersCRUD.delete
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UsersTable
      Events:
        PutRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /users/{resourceId}
            Method: delete
            Auth:
              Authorizer: CustomLambdaTokenAuthorizer
  PublishFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-demo-bucket-dpp/7d9c1a4b7483fe69b2bcc07f0d45b791
      Handler: mediaCRUD.upload
      Runtime: nodejs8.10
      Timeout: 60
      Policies:
      - S3CrudPolicy:
          BucketName:
            Fn::Sub: ${ImagesBucket}
      Environment:
        Variables:
          S3_bucket:
            Ref: ImagesBucket
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /upload2media
            Method: post
  PublishGETFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-demo-bucket-dpp/7d9c1a4b7483fe69b2bcc07f0d45b791
      Handler: mediaCRUD.get
      Runtime: nodejs8.10
      Timeout: 60
      Policies:
      - S3CrudPolicy:
          BucketName:
            Fn::Sub: ${ImagesBucket}
      Environment:
        Variables:
          S3_bucket:
            Ref: ImagesBucket
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /upload
            Method: get
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: usersTable
      PrimaryKey:
        Name: id
        Type: String
      Tags:
        Department: Middleware
        AppType: Serverless
      SSESpecification:
        SSEEnabled: true
  ImagesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: ImagesBucket
Outputs:
  ApiURL:
    Description: API URL
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/
