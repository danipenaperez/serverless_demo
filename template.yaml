AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Project using some AWS serveless services
Parameters:
  ImagesBucket:
    Type: String
    Default: "images-bucket-dpp-new-2"
Globals:
  Function:
    Timeout: 50
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Cors: 
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
        #AllowCredentials: true
      Auth:
        # AddDefaultAuthorizerToCorsPreflight: False
        # DefaultAuthorizer: CustomLambdaTokenAuthorizer
        Authorizers:
          CustomLambdaTokenAuthorizer:
            FunctionArn: !GetAtt ValidateTokenFunction.Arn
            Identity:
              Header: Authorization
              #ValidationExpression: Bearer.*
# SECURITY ##################################
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./app
      Handler: authorizer.basiclogin
      Runtime: nodejs8.10
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /login
            Method: post
  ValidateTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./app
      Handler: authorizer.validateToken
      Runtime: nodejs8.10
## CRUD USERS ###########################            
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./app
      Handler: usersCRUD.get
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        GetUserPath:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /users/{resourceId}
            Method: get
            Auth:
              Authorizer: CustomLambdaTokenAuthorizer 
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./app
      Handler: usersCRUD.create
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          ENTITY_ID_FIELD: 'document.value'
      Events:
        PostRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /users
            Method: post
  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./app
      Handler: usersCRUD.update
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        PutRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /users/{resourceId}
            Method: put
            Auth:
              Authorizer: CustomLambdaTokenAuthorizer
  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./app
      Handler: usersCRUD.delete
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        PutRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /users/{resourceId}
            Method: delete
            Auth:
              Authorizer: CustomLambdaTokenAuthorizer
##UPDLOAD MEDIA #######              
  PublishFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./app
      Handler: mediaCRUD.upload
      Runtime: nodejs8.10
      Timeout: 60
      Policies:
      - S3CrudPolicy:
          BucketName: !Sub "${ImagesBucket}"
      Environment:
        Variables:
          # S3_bucket: !Ref SrcBucket
          S3_bucket: !Ref ImagesBucket
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /upload
            Method: post                                      
  # @see https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable
  UsersTable:
   Type: AWS::Serverless::SimpleTable
   Properties:
     TableName: usersTable
     PrimaryKey:
       Name: id
       Type: String
     #ProvisionedThroughput:
     #  ReadCapacityUnits: 5
     #  WriteCapacityUnits: 5
     Tags:
       Department: Middleware
       AppType: Serverless
     SSESpecification:
       SSEEnabled: true #Enalbes encription 
  ImagesS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ImagesBucket       
Outputs:
  ApiURL:
    Description: "API URL"
    Value: !Sub 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/'